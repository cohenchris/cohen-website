{"ast":null,"code":"import _classCallCheck from\"/home/chris/Projects/cohen-website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/chris/Projects/cohen-website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/chris/Projects/cohen-website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/chris/Projects/cohen-website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/chris/Projects/cohen-website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React from\"react\";import NavigationBar from\"../../components/NavigationBar/NavigationBar.js\";import\"./Projects.css\";var Projects=/*#__PURE__*/function(_React$Component){_inherits(Projects,_React$Component);function Projects(){_classCallCheck(this,Projects);return _possibleConstructorReturn(this,_getPrototypeOf(Projects).apply(this,arguments));}_createClass(Projects,[{key:\"render\",value:function render(){return React.createElement(\"div\",{className:\"projectsBackground\"},React.createElement(NavigationBar,{color:\"teal\"}),React.createElement(\"div\",{className:\"projectsStyle\"},React.createElement(\"h1\",{style:{color:\"teal\",\"font-family\":\"Francois One, sans-serif\",\"text-align\":\"center\"}},React.createElement(\"strong\",null,\"PROJECTS\")),React.createElement(\"ul\",null,React.createElement(\"li\",null,React.createElement(\"h4\",null,React.createElement(\"strong\",null,\"Terminal Shell in C\"))),React.createElement(\"div\",null,React.createElement(\"p\",null,\"- This month-long project covered an absurd amount of content. We were tasked to create what is essentially a bash clone. The lexical analysis was done using \",React.createElement(\"strong\",null,\"flex and bison\"),\", where I tokenized certain inputs using regular expressions, executing different code based on what was inputted.\"),React.createElement(\"p\",null,\"- \",React.createElement(\"strong\",null,\"File redirection\"),\" was one of the first things that I tackled, so I learned all about juggling file descriptors to do so. \",React.createElement(\"strong\",null,\"Piping\"),\" was a bit different than file descriptors - we had to use the pipe() system call and read/write to/from the pipe to communicate between different parts of the command.\"),React.createElement(\"p\",null,\"- The next section covered\",\" \",React.createElement(\"strong\",null,\"signals and signal handling\"),\". Specifically, we set up handlers for ctrl-C (terminate command), ctrl-R (search command history), and SIGCHLD (zombie process elimination).\"),React.createElement(\"p\",null,\"- One of the most challenging parts of this project was implementing \",React.createElement(\"strong\",null,\"subshells\"),\". For this, we had to fork a new process, and use two different pipes to communicate with it in order to get the output of the desired command. This proved difficult to debug because of the fact that two processes were being run.\"),React.createElement(\"p\",null,\"- We also used regular expressions and directory browsing to implement \",React.createElement(\"strong\",null,\"wildcarding\"),\". We handled wildcarding for '*' and '?'.\"),React.createElement(\"p\",null,\"- One smaller part of this project was\",\" \",React.createElement(\"strong\",null,\"decoding raw input\"),\", rather than canonical input. I was able to allow the user to type as they normally would with bash. Specifically, I handled left arrow, right arrow, delete (and ctrl-D), backspace (and ctrl-H), home (and ctrl-A), and end (and ctrl-E).\"),React.createElement(\"p\",null,\"- The last part of this project was to implement\",\" \",React.createElement(\"strong\",null,\"command history and ctrl-R searching\"),\". Command history was pretty straightforward, and I ended up imitating bash's ctrl-R searching mode.\")),React.createElement(\"li\",null,React.createElement(\"h4\",null,React.createElement(\"strong\",null,\"Memory Allocator in C\"))),React.createElement(\"p\",null,\"- This large project taught me the inner workings of memory allocation. I created a program that has functionality for malloc(), free(), realloc(), and calloc(). The main, most difficult parts were managing large blocks of heap memory obtained by sbrk() to avoid over-allocation and fragmentation of memory. Multiple different block-finding methods were implemented - first fit, best fit, worst fit, and next fit.\"),React.createElement(\"li\",null,React.createElement(\"h4\",null,React.createElement(\"strong\",null,\"HTTP/HTTPS Multithreaded Web Server in C\"))),React.createElement(\"p\",null,\"- This assignment gave me valuable introductory networking information. We first learned about HTTP request/response formats. To give my server some security, I learned about basic authentication using the 'Authorization' header. I also ended up being able to serve static and executable files to the client.\"),React.createElement(\"p\",null,\"- One of the more important parts of this server was learning about different types of \",React.createElement(\"strong\",null,\"concurrent processing\"),\". The server that I created supported concurrency through forking, threading, and using a thread pool for each request. Using mutexes I made sure that the server was thread safe.\"),React.createElement(\"p\",null,\"- Due to this project,\",\" \",React.createElement(\"strong\",null,\"I am very comfortable with semaphores, mutexes, forking, and threading.\")),React.createElement(\"li\",null,React.createElement(\"h4\",null,React.createElement(\"strong\",null,\"Unix Task Manager in C\"))),React.createElement(\"p\",null,\"- During this group project, I was assigned to explore and understand what goes on in /proc on a Unix system, and pulled information such as system information, process name, PID, process resources, disk size, and disk usage. From there, I put the information into easily-accessible structs for the front-end team to handle.\"),React.createElement(\"li\",null,React.createElement(\"h4\",null,React.createElement(\"strong\",null,\"Twistter (Twister + Reddit Crossover) in Javascript (ReactJS)\"))),React.createElement(\"p\",null,\"- This group project focused on the SCRUM philosophy of software development and making a full-fledged application. I was assigned to the front end team, since I already knew ReactJS, and did an extremely large majority of the work for the front end. I learned how to communicate with the back end Python Flask API using 'axios' GET/POST calls, and made a dynamically-updated GUI for the user. I am most proud of creating a login/logout functionality, as well as a Direct Messaging system between users. The most difficult part was updating the GUI based on who is logged in.\"),React.createElement(\"li\",null,React.createElement(\"h4\",null,React.createElement(\"strong\",null,\"NLP Database Parsing in Python\"))),React.createElement(\"p\",null,\"- During the Summer of 2019, I had the pleasure of working for the Naval Surface Warfare Center, Crane Division. I improved US Navy missile sustainment efforts by upgrading an existing natural language processing algorithm to process failure databases. The work that I contributed to has a patent pending as well.\"),React.createElement(\"li\",null,React.createElement(\"h4\",null,React.createElement(\"strong\",null,\"printf() from scratch in ARM Assembly\"))),React.createElement(\"p\",null,\"- In my Computer Architecture course, we had to implement functionality for\",\" \",React.createElement(\"strong\",null,\"printf()'s %c, %s, %d, and %x in ARM Assembly\"),\". %c and %s were accomplished using looping and putchar(). %x was a bit more difficult - I used bit shifting to isolate 4 bits, translated into a hex digit, and print the hex digit. %d was the toughest. I isolated each base 10 digit and printed it, but it was much tougher than %x since base 10 is not a multiple of 2, so bit shifting is not possible.\"),React.createElement(\"li\",null,React.createElement(\"h4\",null,React.createElement(\"strong\",null,\"Ubuntu Tweaking\"))),React.createElement(\"p\",null,\"- One of my main hobbies is tweaking and maintaining Ubuntu on my laptop, which is a great way for me to learn more about how Unix works. I have written numerous bash scripts to automate some mundane tasks, and heavily customized my .vimrc and .bashrc. I enjoy customizing my workflow for efficiency, using a tiling window manager (i3) and a task bar (polybar). The dot files for these are on my GitHub.\"),React.createElement(\"li\",null,React.createElement(\"h4\",null,React.createElement(\"strong\",null,\"DNS Level Adblocker\"))),React.createElement(\"p\",null,\"- Once I completed my Computer Architecture course, I had a Raspberry PI 3B+ left over, so I decided to download a program called PiHole. This program functions as a DNS server for your home network, so I redirected all of my router's traffic to the Pi. It uses a database of malicious/intrusive host names to block them before they even reach your device. I particularly like it because it blocks advertisements AND trackers.\")),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"br\",null)));}}]);return Projects;}(React.Component);export{Projects as default};","map":{"version":3,"sources":["/home/chris/Projects/cohen-website/src/main_pages/Projects/Projects.js"],"names":["React","NavigationBar","Projects","color","Component"],"mappings":"2wBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,aAAP,KAA0B,iDAA1B,CACA,MAAO,gBAAP,C,GAEqBC,CAAAA,Q,sRACV,CACP,MACE,4BAAK,SAAS,CAAC,oBAAf,EACE,oBAAC,aAAD,EAAe,KAAK,CAAC,MAArB,EADF,CAEE,2BAAK,SAAS,CAAC,eAAf,EACE,0BACE,KAAK,CAAE,CACLC,KAAK,CAAE,MADF,CAEL,cAAe,0BAFV,CAGL,aAAc,QAHT,CADT,EAOE,6CAPF,CADF,CAUE,8BACE,8BACE,8BACE,wDADF,CADF,CADF,CAME,+BACE,8LAGkC,mDAHlC,sHADF,CAQE,kCACI,qDADJ,4GAGY,2CAHZ,4KARF,CAgBE,0DAC6B,GAD7B,CAEE,gEAFF,iJAhBF,CAsBE,qGAEe,8CAFf,yOAtBF,CA8BE,uGAEY,gDAFZ,6CA9BF,CAmCE,sEACyC,GADzC,CAEE,uDAFF,gPAnCF,CA2CE,gFACmD,GADnD,CAEE,yEAFF,wGA3CF,CANF,CAwDE,8BACE,8BACE,0DADF,CADF,CAxDF,CA6DE,6bA7DF,CAsEE,8BACE,8BACE,6EADF,CADF,CAtEF,CA2EE,oVA3EF,CAkFE,uHAE2B,0DAF3B,sLAlFF,CAyFE,sDACyB,GADzB,CAEE,4GAFF,CAzFF,CAgGE,8BACE,8BACE,2DADF,CADF,CAhGF,CAqGE,oWArGF,CA6GE,8BACE,8BACE,kGADF,CADF,CA7GF,CAoHE,+lBApHF,CA+HE,8BACE,8BACE,mEADF,CADF,CA/HF,CAoIE,yVApIF,CA2IE,8BACE,8BACE,0EADF,CADF,CA3IF,CAgJE,2GAEoB,GAFpB,CAGE,kFAHF,mWAhJF,CA2JE,8BACE,8BACE,oDADF,CADF,CA3JF,CAgKE,mbAhKF,CAyKE,8BACE,8BACE,wDADF,CADF,CAzKF,CA8KE,0cA9KF,CAVF,CAkME,8BAlMF,CAmME,8BAnMF,CAoME,8BApMF,CAqME,8BArMF,CAFF,CADF,CA4MD,C,sBA9MmCH,KAAK,CAACI,S,SAAvBF,Q","sourcesContent":["import React from \"react\";\nimport NavigationBar from \"../../components/NavigationBar/NavigationBar.js\";\nimport \"./Projects.css\";\n\nexport default class Projects extends React.Component {\n  render() {\n    return (\n      <div className=\"projectsBackground\">\n        <NavigationBar color=\"teal\" />\n        <div className=\"projectsStyle\">\n          <h1\n            style={{\n              color: \"teal\",\n              \"font-family\": \"Francois One, sans-serif\",\n              \"text-align\": \"center\"\n            }}\n          >\n            <strong>PROJECTS</strong>\n          </h1>\n          <ul>\n            <li>\n              <h4>\n                <strong>Terminal Shell in C</strong>\n              </h4>\n            </li>\n            <div>\n              <p>\n                - This month-long project covered an absurd amount of content.\n                We were tasked to create what is essentially a bash clone. The\n                lexical analysis was done using <strong>flex and bison</strong>,\n                where I tokenized certain inputs using regular expressions,\n                executing different code based on what was inputted.\n              </p>\n              <p>\n                - <strong>File redirection</strong> was one of the first things\n                that I tackled, so I learned all about juggling file descriptors\n                to do so. <strong>Piping</strong> was a bit different than file\n                descriptors - we had to use the pipe() system call and\n                read/write to/from the pipe to communicate between different\n                parts of the command.\n              </p>\n              <p>\n                - The next section covered{\" \"}\n                <strong>signals and signal handling</strong>. Specifically, we\n                set up handlers for ctrl-C (terminate command), ctrl-R (search\n                command history), and SIGCHLD (zombie process elimination).\n              </p>\n              <p>\n                - One of the most challenging parts of this project was\n                implementing <strong>subshells</strong>. For this, we had to\n                fork a new process, and use two different pipes to communicate\n                with it in order to get the output of the desired command. This\n                proved difficult to debug because of the fact that two processes\n                were being run.\n              </p>\n              <p>\n                - We also used regular expressions and directory browsing to\n                implement <strong>wildcarding</strong>. We handled wildcarding\n                for '*' and '?'.\n              </p>\n              <p>\n                - One smaller part of this project was{\" \"}\n                <strong>decoding raw input</strong>, rather than canonical\n                input. I was able to allow the user to type as they normally\n                would with bash. Specifically, I handled left arrow, right\n                arrow, delete (and ctrl-D), backspace (and ctrl-H), home (and\n                ctrl-A), and end (and ctrl-E).\n              </p>\n              <p>\n                - The last part of this project was to implement{\" \"}\n                <strong>command history and ctrl-R searching</strong>. Command\n                history was pretty straightforward, and I ended up imitating\n                bash's ctrl-R searching mode.\n              </p>\n            </div>\n            <li>\n              <h4>\n                <strong>Memory Allocator in C</strong>\n              </h4>\n            </li>\n            <p>\n              - This large project taught me the inner workings of memory\n              allocation. I created a program that has functionality for\n              malloc(), free(), realloc(), and calloc(). The main, most\n              difficult parts were managing large blocks of heap memory obtained\n              by sbrk() to avoid over-allocation and fragmentation of memory.\n              Multiple different block-finding methods were implemented - first\n              fit, best fit, worst fit, and next fit.\n            </p>\n            <li>\n              <h4>\n                <strong>HTTP/HTTPS Multithreaded Web Server in C</strong>\n              </h4>\n            </li>\n            <p>\n              - This assignment gave me valuable introductory networking\n              information. We first learned about HTTP request/response formats.\n              To give my server some security, I learned about basic\n              authentication using the 'Authorization' header. I also ended up\n              being able to serve static and executable files to the client.\n            </p>\n            <p>\n              - One of the more important parts of this server was learning\n              about different types of <strong>concurrent processing</strong>.\n              The server that I created supported concurrency through forking,\n              threading, and using a thread pool for each request. Using mutexes\n              I made sure that the server was thread safe.\n            </p>\n            <p>\n              - Due to this project,{\" \"}\n              <strong>\n                I am very comfortable with semaphores, mutexes, forking, and\n                threading.\n              </strong>\n            </p>\n            <li>\n              <h4>\n                <strong>Unix Task Manager in C</strong>\n              </h4>\n            </li>\n            <p>\n              - During this group project, I was assigned to explore and\n              understand what goes on in /proc on a Unix system, and pulled\n              information such as system information, process name, PID, process\n              resources, disk size, and disk usage. From there, I put the\n              information into easily-accessible structs for the front-end team\n              to handle.\n            </p>\n            <li>\n              <h4>\n                <strong>\n                  Twistter (Twister + Reddit Crossover) in Javascript (ReactJS)\n                </strong>\n              </h4>\n            </li>\n            <p>\n              - This group project focused on the SCRUM philosophy of software\n              development and making a full-fledged application. I was assigned\n              to the front end team, since I already knew ReactJS, and did an\n              extremely large majority of the work for the front end. I learned\n              how to communicate with the back end Python Flask API using\n              'axios' GET/POST calls, and made a dynamically-updated GUI for the\n              user. I am most proud of creating a login/logout functionality, as\n              well as a Direct Messaging system between users. The most\n              difficult part was updating the GUI based on who is logged in.\n            </p>\n            <li>\n              <h4>\n                <strong>NLP Database Parsing in Python</strong>\n              </h4>\n            </li>\n            <p>\n              - During the Summer of 2019, I had the pleasure of working for the\n              Naval Surface Warfare Center, Crane Division. I improved US Navy\n              missile sustainment efforts by upgrading an existing natural\n              language processing algorithm to process failure databases. The\n              work that I contributed to has a patent pending as well.\n            </p>\n            <li>\n              <h4>\n                <strong>printf() from scratch in ARM Assembly</strong>\n              </h4>\n            </li>\n            <p>\n              - In my Computer Architecture course, we had to implement\n              functionality for{\" \"}\n              <strong>printf()'s %c, %s, %d, and %x in ARM Assembly</strong>. %c\n              and %s were accomplished using looping and putchar(). %x was a bit\n              more difficult - I used bit shifting to isolate 4 bits, translated\n              into a hex digit, and print the hex digit. %d was the toughest. I\n              isolated each base 10 digit and printed it, but it was much\n              tougher than %x since base 10 is not a multiple of 2, so bit\n              shifting is not possible.\n            </p>\n            <li>\n              <h4>\n                <strong>Ubuntu Tweaking</strong>\n              </h4>\n            </li>\n            <p>\n              - One of my main hobbies is tweaking and maintaining Ubuntu on my\n              laptop, which is a great way for me to learn more about how Unix\n              works. I have written numerous bash scripts to automate some\n              mundane tasks, and heavily customized my .vimrc and .bashrc. I\n              enjoy customizing my workflow for efficiency, using a tiling\n              window manager (i3) and a task bar (polybar). The dot files for\n              these are on my GitHub.\n            </p>\n            <li>\n              <h4>\n                <strong>DNS Level Adblocker</strong>\n              </h4>\n            </li>\n            <p>\n              - Once I completed my Computer Architecture course, I had a\n              Raspberry PI 3B+ left over, so I decided to download a program\n              called PiHole. This program functions as a DNS server for your\n              home network, so I redirected all of my router's traffic to the\n              Pi. It uses a database of malicious/intrusive host names to block\n              them before they even reach your device. I particularly like it\n              because it blocks advertisements AND trackers.\n            </p>\n          </ul>\n          <br />\n          <br />\n          <br />\n          <br />\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}